import computed 
import types
import entity
import utils
import condition

// === Pipeline ===

Pipeline:
    'Pipeline' name=ID
        ('description:' description=STRING)?
        ('tags:' tags+=STRING[','])?
        'interface:'
            'input:' input=[Entity:FQN]
            'output:' output=[Entity:FQN]
            // ('error:' errorOutput=PayloadUnion)?
        'steps:'
            (steps+=PipelineStep)*
    'end'
;

PipelineStep:
      StepReference
    | InlineValidationStep
    | InlineComputeStep
    | InlinePersistStep
    | InlineRespondStep
;

StepReference:
    'use' step=[StepDefinition]
;

// === Inline Steps ===
InlineValidationStep:
    'validate:'
        (rules+=ValidationRule)+
    'end'
;

InlineComputeStep:
    'compute:'
        (computations+=ComputeMapping)+
    'end'
;

InlinePersistStep:
    'persist:' entity=[Entity]
        (mappings+=PersistMapping)+
    'end'
;

InlineRespondStep:
    'respond:'
        (mappings+=ResponseMapping)+
    'end'
;

// === External Step Definitions ===
StepDefinition:
      ValidationStep
    | ComputeStep
    | PersistStep
    | RespondStep
;

ValidationStep:
    'ValidationStep' name=ID
    'rules:'
        (rules+=ValidationRule)+
    'end'
;

ComputeStep:
    'ComputeStep' name=ID
    'computations:'
        (computations+=ComputeMapping)+
    'end'
;

PersistStep:
    'PersistStep' name=ID
    'entity:' entity=[Entity]
    'mappings:'
        (mappings+=PersistMapping)+
    'end'
;

RespondStep:
    'RespondStep' name=ID
    'mappings:'
        (mappings+=ResponseMapping)+
    'end'
;

ValidationRule:
    condition=Condition ('=>' errorEntity=[Entity])?
;

// === Mappings and Expressions ===
ComputeMapping:
    target=ID '=' expression=Expression
;

PersistMapping:
    target=ID '=' expression=Expression
;

ResponseMapping:
    target=ID '=' source=Expression
;
