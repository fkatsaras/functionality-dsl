import utils
import expression

AttrType:
  'string' | 'int' | 'float' | 'number' | 'bool' | 'datetime' | 'uuid' | 'dict' | 'list'
;

// Type constraint with range syntax: type(min..max) or type(exact)
TypeSpec:
  baseType=AttrType constraint=TypeConstraint? nullable='?'? validators*=Validator
;

TypeConstraint:
  '(' range=RangeExpr ')'
;

RangeExpr:
    min=Number '..' max=Number    // Range: (1..10)
  | min=Number '..'                // Min only: (1..)
  | '..' max=Number                // Max only: (..10)
  | exact=Number                   // Exact: (5)
;

Number: FLOAT | INT;

// Validator decorator: @email, @min(5), @validate(...)
Validator:
  '@' name=ID ('(' args+=ValidatorArg[','] ')')?
;

ValidatorArg:
  expr=Expr
;

AttrValue:
  STRING | FLOAT | INT | Bool
;

Attribute:
    name=ID ':' type=TypeSpec '=' expr=Expr exprValidators*=Validator ';' 
;

Input:
  alias=ID ':' target=[Entity]
;

Entity:
  'Entity' name=ID
  ('(' parents+=[Entity] (',' parents+=[Entity])* ')')?
  (
      'source:' source=[Source]
    | 'attributes:' '-' attributes+=Attribute ('-' attributes+=Attribute)*
  )*
  'end'
;

// Entity sources / targets -------------------
Source:
    APIEndpointREST
  | APIEndpointWS
  | SourceREST
  | SourceWS
;

ApiKeyLoc: 'header' | 'query';

AuthBlock:
    'type:' kind='basic'
    'username:' username=STRING
    'password:' password=STRING
  |  'type:' kind='bearer'
    'token:' token=STRING
  |  'type:' kind='api_key'
    'key:' key=STRING
    'in:' location=ApiKeyLoc
    'value:' value=STRING
;

// ---------- SOURCE (integration) ----------
SourceREST:
  'Source<' kind='REST' '>' name=ID
  (
    'url:' url=STRING
    'verb:' verb=HttpVerb
    ('entity:' entity=[Entity])?
    ('headers:' '[' headers+=Header (',' headers+=Header)* ']')?
    ('auth:' auth=AuthBlock)?  
  )
  'end'
;

SourceWS:
  'Source<' kind='WS' '>' name=ID
  (
    'url:' url=STRING
    ('entity_in:' entity_in=[Entity])?
    ('entity_out:' entity_out=[Entity])?
    ('protocol:' protocol=STRING)?
    ('subprotocols:' subprotocols=StringList)?
    ('headers:' '[' headers+=Header (',' headers+=Header)* ']')?
    ('auth:' auth=AuthBlock)?  
  )#
  'end'
;

// ---------- API (presentation) ----------
APIEndpointREST:
  'APIEndpoint<' kind='REST' '>' name=ID
  (
    'path:' path=STRING
    'verb:' verb=HttpVerb
    'entity:' entity=[Entity]
    ('summary:' summary=STRING)?
    ('auth:' auth=AuthBlock)?  
  )
  'end'
;

APIEndpointWS:
  'APIEndpoint<' kind='WS' '>' name=ID
  (
    'path:' path=STRING
    ('entity_in:' entity_in=[Entity])?
    ('entity_out:' entity_out=[Entity])?
    ('auth:' auth=AuthBlock)? 
    ('summary:' summary=STRING)? 
  )
  'end'
;

// ---------- COMMON ----------
HttpVerb: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' ;

StringList: '[' (items+=STRING (',' items+=STRING)*)? ']' ;
Header: key=/[A-Za-z][A-Za-z0-9\-]*/ ':' value=STRING ;
