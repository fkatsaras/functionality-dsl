# router_ws_duplex.jinja
import uuid
import json
import logging
import asyncio
import websockets
from typing import Any, Dict, Optional, List
from fastapi import APIRouter, WebSocket, WebSocketDisconnect

from app.core.computed import compile_safe, safe_globals
from app.core.logging import set_request_id
from app.core import wsbus

logger = logging.getLogger("fdsl.router.ws.{{ endpoint.name }}")

router = APIRouter(
    prefix="{{ route_prefix }}",
    tags=["{{ (endpoint.summary or endpoint.name) ~ ' (duplex)' }}"]
)

# === External WS targets (optional persistence/integration layer) ===
_EXTERNAL_TARGETS = [
{%- for tgt in external_targets %}
    {
        "url": "{{ tgt.url }}",
        "headers": {{ tgt.headers }},
        "subprotocols": {{ (tgt.subprotocols or []) | tojson }},
        "protocol": "{{ tgt.protocol or 'json' }}"
    },
{%- endfor %}
]

# === External WS sources for inbound (listen) ===
_WS_INPUTS = [
{%- for w in ws_inputs %}
    {
        "entity": "{{ w.entity }}",
        "alias": "{{ w.alias }}",
        "url": "{{ w.url }}",
        "headers": {{ w.headers }},
        "subprotocols": {{ (w.subprotocols or []) | tojson }},
        "protocol": "{{ w.protocol or 'json' }}",
        "attrs": {{ w.attrs | tojson }}
    },
{%- endfor %}
]

# === Compiled inbound entity chain (External → Internal) ===
_COMPILED_CHAIN_INBOUND = [
{%- for ent in compiled_chain_inbound %}
  {
    "name": "{{ ent.name }}",
    "attrs": [
    {%- for a in ent.attrs %}
      {"name": "{{ a.name }}", "expr": {{ a.pyexpr | tojson }}},
    {%- endfor %}
    ]
  },
{%- endfor %}
]

# === Compiled outbound entity chain (Internal → External) ===
_COMPILED_CHAIN_OUTBOUND = [
{%- for ent in compiled_chain_outbound %}
  {
    "name": "{{ ent.name }}",
    "attrs": [
    {%- for a in ent.attrs %}
      {"name": "{{ a.name }}", "expr": {{ a.pyexpr | tojson }}},
    {%- endfor %}
    ]
  },
{%- endfor %}
]

# Persistent external connections (for publish forwarding)
_target_connections: List[Optional[Any]] = [None] * len(_EXTERNAL_TARGETS)
_target_lock = asyncio.Lock()


async def _ensure_target_connection(idx: int):
    if idx >= len(_EXTERNAL_TARGETS):
        return
    tgt = _EXTERNAL_TARGETS[idx]
    async with _target_lock:
        if _target_connections[idx] is not None:
            try:
                await _target_connections[idx].ping()
                return
            except Exception:
                _target_connections[idx] = None
        try:
            _target_connections[idx] = await websockets.connect(
                tgt["url"],
                extra_headers=tgt["headers"] or [],
                subprotocols=tgt["subprotocols"] or None
            )
            logger.info("target_connected", extra={"url": tgt["url"]})
        except Exception as ex:
            logger.error("target_connect_failed", extra={"url": tgt["url"], "err": repr(ex)})


def _compute_row(payload: Any, sender_id: str, chain: list, seed_entity: str) -> Dict[str, Any] | None:
    ctx: Dict[str, Any] = {"ctx": {}, "__sender": sender_id}

    try:
        # Directly bind the incoming payload under the seed entity
        ctx[seed_entity] = payload

        # walk entity chain
        for ent in chain:
            shaped: Dict[str, Any] = {}
            eval_ctx = {"ctx": ctx}
            for a in ent.get("attrs") or []:
                try:
                    compiled = compile_safe(a["expr"])
                    shaped[a["name"]] = eval(compiled, safe_globals, eval_ctx)
                except Exception as ex:
                    logger.error("attr_eval_error", extra={
                        "entity": ent["name"],
                        "attr": a["name"],
                        "expr": a["expr"],
                        "err": repr(ex),
                        "ctx_keys": list(ctx.keys())
                    })
                    shaped[a["name"]] = None
            ctx[ent["name"]] = shaped

        return ctx[chain[-1]["name"]] if chain else ctx[seed_entity]
    except Exception as ex:
        logger.error("compute_error", extra={"err": repr(ex)})
        return None


async def _forward_to_targets(row: Dict[str, Any]):
    for idx, tgt in enumerate(_EXTERNAL_TARGETS):
        await _ensure_target_connection(idx)
        conn = _target_connections[idx]
        if conn:
            try:
                if tgt["protocol"] == "json":
                    await conn.send(json.dumps(row))
                elif tgt["protocol"] == "text":
                    await conn.send(str(row))
                else:
                    await conn.send(json.dumps(row))
            except Exception as ex:
                logger.error("target_forward_failed", extra={"url": tgt["url"], "err": repr(ex)})
                _target_connections[idx] = None


@router.websocket("/duplex")
async def duplex(ws: WebSocket):
    rid = uuid.uuid4().hex
    set_request_id(rid)
    await ws.accept()
    logger.info("client_connected", extra={"rid": rid, "path": str(ws.url)})

    inbound_entity  = "{{ compiled_chain_inbound[0].name if compiled_chain_inbound else entity.name }}"
    outbound_entity = "{{ compiled_chain_outbound[-1].name if compiled_chain_outbound else entity.name }}"


    bus_in  = wsbus.get_bus(inbound_entity)
    bus_out = wsbus.get_bus(outbound_entity)

    async def inbound_loop():
        # client → server → external
        while True:
            raw = await ws.receive_text()
            try:
                payload = json.loads(raw)
            except Exception:
                payload = raw
            row = _compute_row(payload, rid, _COMPILED_CHAIN_OUTBOUND, "{{ outbound_seed_entity }}")
            if row is not None:
                await bus_out.publish(row)
                if _EXTERNAL_TARGETS:
                    await _forward_to_targets(row)

    async def outbound_loop():
        # server → client (from inbound bus)
        await bus_in.add_ws(ws)
        try:
            while True:
                await asyncio.sleep(3600)
        finally:
            await bus_in.remove_ws(ws)

    async def upstream_loop():
        # external → server → client (through inbound chain)
        for inp in _WS_INPUTS:
            try:
                async with websockets.connect(
                    inp["url"],
                    extra_headers=inp["headers"],
                    subprotocols=inp["subprotocols"] or None
                ) as ext_ws:
                    async for raw in ext_ws:
                        try:
                            payload = json.loads(raw)
                        except Exception:
                            payload = raw
                        row = _compute_row(payload, rid, _COMPILED_CHAIN_INBOUND, inbound_entity)
                        if row is not None:
                            await bus_in.publish(row)
            except Exception as ex:
                logger.error("upstream_failed", extra={"url": inp["url"], "err": repr(ex)})
                await asyncio.sleep(5)

    try:
        await asyncio.gather(inbound_loop(), outbound_loop(), upstream_loop())
    except WebSocketDisconnect:
        logger.info("client_disconnected", extra={"rid": rid})
