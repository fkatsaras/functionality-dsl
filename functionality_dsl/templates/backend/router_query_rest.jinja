# ========================================================================
# AUTO-GENERATED QUERY ROUTER
# ========================================================================

import logging
from typing import Any, Dict

from fastapi import APIRouter, HTTPException
{% if endpoint.auth and endpoint.auth.type == 'bearer' %}
from fastapi import Depends
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
security = HTTPBearer()
{% endif %}

from app.services import {{ endpoint.name | lower }}_service


logger = logging.getLogger("fdsl.router.{{ endpoint.name }}")

router = APIRouter(
    prefix="{{ route_prefix }}",
    tags=["{{ endpoint.summary or endpoint.name }}"]
)


{% set pparams = endpoint.path_params or [] %}
@router.get("", response_model=Dict[str, Any])
async def query_{{ endpoint.name | lower }}(
    {% for p in pparams %}{{ p }}: str{% if not loop.last %}, {% endif %}{% endfor %}
    {% if endpoint.auth and endpoint.auth.kind == 'bearer' %}{% if pparams %}, {% endif %}credentials: HTTPAuthorizationCredentials = Depends(security){% endif %}
):
    """
    Query endpoint for {{ entity.name }}.
    Aggregates data from external sources and internal dependencies,
    then computes the final entity attributes.
    """
    # ----------------------------------------------------------------
    # Authentication
    # ----------------------------------------------------------------
    {% if endpoint.auth %}
    {% if endpoint.auth.kind == 'bearer' %}
    if not credentials or not credentials.credentials:
        raise HTTPException(status_code=401, detail="Missing bearer token")
    {% elif endpoint.auth.kind == 'basic' %}
    # Basic auth validated automatically by FastAPI
    pass
    {% elif endpoint.auth.kind == 'api_key' %}
    # API key validated automatically
    pass
    {% endif %}
    {% endif %}

    # ----------------------------------------------------------------
    # Delegate to service layer
    # ----------------------------------------------------------------
    try:
        path_params = {
            {% for p in pparams %}
            "{{ p }}": {{ p }}{% if not loop.last %},{% endif %}
            {% endfor %}
        }

        return await {{ endpoint.name | lower }}_service.execute_query(path_params)

    except HTTPException:
        raise
    except Exception as unexpected_error:
        logger.exception(f"[ERROR] - Unexpected error in query {{ entity.name }}: {unexpected_error}")
        raise HTTPException(status_code=500, detail="Internal server error")