# app/api/routers/{{ endpoint.name | lower }}_action.py
from fastapi import APIRouter, Request, Response

from app.core.http import get_http_client
from app.core.utils import resolve_headers

router = APIRouter(
    prefix="/api/external/{{ endpoint.name | lower }}",
    tags=["External: {{ endpoint.name }} ({{ (endpoint.verb or 'POST')|upper }} )"],
)

_UPSTREAM_BASE = "{{ endpoint.url }}"
_METHOD = "{{ (endpoint.verb or 'POST')|upper }}"
_HEADERS = resolve_headers([
{% for h in endpoint.headers | default([], true) -%}
    ("{{ h.key }}", "{{ h.value }}"),
{% endfor -%}
])

async def _forward(request: Request, subpath: str | None = None):
    client = get_http_client()
    url = _UPSTREAM_BASE if not subpath else (_UPSTREAM_BASE.rstrip("/") + "/" + subpath)

    # body can be JSON or form (or empty)
    body = None
    # try JSON
    try:
        body = await request.json()
    except Exception:
        # try form
        try:
            form = await request.form()
            body = dict(form)
        except Exception:
            body = None

    r = await client.request(
        _METHOD,
        url,
        headers=_HEADERS,
        params=dict(request.query_params),
        json=body,
    )

    # pass upstream content-type through
    media_type = r.headers.get("content-type", "application/json")
    return Response(content=r.content, status_code=r.status_code, media_type=media_type)

@router.api_route("/", methods=[_METHOD])
async def root(request: Request):
    return await _forward(request)

@router.api_route("/{subpath:path}", methods=[_METHOD])
async def with_path(subpath: str, request: Request):
    return await _forward(request, subpath)
