{# app/infra/repositories/{{ entity.name | lower }}_adapter.py #}
from typing import Any, Dict, List, Optional
from app.core.http import get_http_client
from app.core.utils import resolve_headers
from app.core.errors import http_upstream_error

_UPSTREAM_URL = "{{ entity.source.url }}"
_HEADERS = resolve_headers([
{% for h in entity.source.headers | default([], true) %}    ("{{ h.key }}", "{{ h.value }}"),
{% endfor %}])

_DEFAULT_FIELDS: list[str] = [
{% for name in schema_attrs %}    "{{ name }}",
{% endfor %}]

def _project(x: Dict[str, Any], keep: Optional[list[str]]) -> Dict[str, Any]:
    if not keep:
        return x
    return {k: x.get(k) for k in keep}

class {{ entity.name }}Adapter:
    async def list(self) -> List[Dict[str, Any]]:
        client = get_http_client()
        r = await client.get(_UPSTREAM_URL, headers=_HEADERS)
        if r.status_code >= 400:
            http_upstream_error(r)

        data = r.json()
        if not isinstance(data, list):
            from fastapi import HTTPException
            raise HTTPException(status_code=502, detail="Upstream did not return a list")

        return [_project(d, _DEFAULT_FIELDS) for d in data]