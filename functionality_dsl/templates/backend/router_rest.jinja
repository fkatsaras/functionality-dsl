import logging

from fastapi import APIRouter, HTTPException, Request
from typing import List, Any

from app.core.http import get_http_client
from app.core.utils import resolve_headers
from app.core.computed import compile_safe, safe_globals

from app.domain.models import {{ entity.name }}

logger = logging.getLogger("fdsl.router.{{ endpoint.name }}")

# Internal endpoint-driven router
router = APIRouter(
    prefix="{{ route_prefix }}",
    tags=["{{ endpoint.summary or endpoint.name }}"]
)

_UPSTREAM_URL = "{{ entity.source.url }}"
_HEADERS = resolve_headers([
{% for h in entity.source.headers | default([], true) -%}
    ("{{ h.key }}", "{{ h.value }}"),
{% endfor -%}
])
_METHOD = "{{ (entity.source.verb or 'GET')|upper }}"

{% if entity._where_py %}
_WHERE = compile_safe({{ entity._where_py | tojson }})
{% else %}
_WHERE = None
{% endif %}

@router.get("/", response_model=List[{{ entity.name }}])
async def list_{{ endpoint.name | lower }}(request: Request):
    client = get_http_client()
    try:
        if _METHOD == "GET":
            r = await client.get(_UPSTREAM_URL, headers=_HEADERS)
        else:
            r = await client.request(_METHOD, _UPSTREAM_URL, headers=_HEADERS, json=None)

        if r.status_code >= 400:
            logger.warning("upstream_error",
                extra={"endpoint":"{{ endpoint.name }}","verb":_METHOD,"url":_UPSTREAM_URL, "status":r.status_code})
            raise HTTPException(status_code=502, detail={"upstream_status": r.status_code, "body": r.text})

        data = r.json()


        print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
        print('Entity {{ entity.name }} gets this data: ')
        print(data)
        print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")


        rows: list = []
        if isinstance(data, list):
            items = data
        else:
            # Coerce into list so output is always iterable
            items = [data]

        for d in items:
            row = d
            if _WHERE is not None:
                try:
                    ok = bool(eval(_WHERE, safe_globals, {"row": row, "ctx": ctx}))
                except Exception:
                    ok = False
                if not ok:
                    continue
            rows.append({{ entity.name }}(**row))

        logger.info("ok", extra={"endpoint":"{{ endpoint.name }}","rows":len(rows)})
        return rows
    except HTTPException:
        raise
    except Exception:
        logger.exception("router_error", extra={"endpoint":"{{ endpoint.name }}","verb":_METHOD,"url":_UPSTREAM_URL})
        raise
