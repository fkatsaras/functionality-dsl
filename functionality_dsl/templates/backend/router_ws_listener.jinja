# Auto-generated WebSocket listener for {{ (entity.name if entity is defined else ws.name) }}
# Listens to external WS and stores latest messages in memory.
import asyncio
import json
import websockets

from fastapi import APIRouter
from typing import Any, Dict

from app.core.utils import resolve_headers

{# If generated for an entity, mount under /api/entities/<entity>; else under /api/external/<ws> #}
{% if entity is defined %}
router = APIRouter(prefix="/api/entities/{{ entity.name | lower }}", tags=["{{ entity.name }}"])
{% else %}
router = APIRouter(prefix="/api/external/{{ ws.name | lower }}", tags=["{{ ws.name }}"])
{% endif %}

_latest: Dict[str, Any] = {"value": None}

{# Decide which headers to use WITHOUT touching `entity` when it's undefined #}
{% if entity is defined %}
  {% set hdrs = entity.source.headers | default([], true) %}
{% else %}
  {% set hdrs = ws.headers | default([], true) %}
{% endif %}

async def _ws_loop():
    while True:
        try:
            headers = resolve_headers([
                {% for h in  hdrs %}
                ("{{ h.key }}", "{{ h.value }}"),
                {% endfor %}
            ])
            async with websockets.connect("{{ ws.url }}", extra_headers=headers) as ws_conn:
                async for raw in ws_conn:
                    try:
                        {% if ws.protocol == "json" %}
                        _latest["value"] = json.loads(raw)
                        {% else %}
                        _latest["value"] = raw
                        {% endif %}
                    except Exception:
                        _latest["value"] = raw
        except Exception:
            await asyncio.sleep(1)

loop = asyncio.get_event_loop()
loop.create_task(_ws_loop())

@router.get("/latest")
async def latest():
    return _latest["value"]