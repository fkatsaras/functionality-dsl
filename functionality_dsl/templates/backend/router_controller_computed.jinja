# app/api/routers/{{ entity.name | lower }}.py
from fastapi import APIRouter, Depends, Query
from typing import List, Optional

from app.domain.models import {{ entity.name }}
from app.core.params import pagination_params
from app.services.{{ entity.name | lower }}_service import {{ entity.name }}Service
{% for inp in inputs %}
from app.services.{{ inp.target_name | lower }}_service import {{ inp.target_name }}Service
{% endfor %}

router = APIRouter(prefix="/api/entities/{{ entity.name | lower }}", tags=["{{ entity.name }}"])

def get_service() -> {{ entity.name }}Service:
{% for inp in inputs %}
    {{ inp.alias }}_svc = {{ inp.target_name }}Service()
{% endfor %}
    return {{ entity.name }}Service(
{% for inp in inputs %}
        {{ inp.alias }}={{ inp.alias }}_svc{{ "," if not loop.last else "" }}
{% endfor %}
    )

@router.get("/", response_model=List[{{ entity.name }}], summary="List {{ entity.name }}")
async def list_{{ entity.name | lower }}(
    p: dict = Depends(pagination_params),
    fields: Optional[str] = Query(default=None, description="comma-separated projection"),
    sort: Optional[str] = Query(default=None, description="field or -field"),
    svc: {{ entity.name }}Service = Depends(get_service),
):
    fields_list = [f.strip() for f in fields.split(",")] if fields else None
    return await svc.list(
        limit=p["limit"],
        offset=p["offset"],
        sort=sort or p["sort"],
        fields=fields_list,
        filters=None,
    )
