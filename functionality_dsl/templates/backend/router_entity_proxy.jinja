# (direct REST source)
import httpx

from fastapi import APIRouter, HTTPException
from typing import List

from app.schemas.models import {{ entity.name }}
from app.core.utils import resolve_headers

router = APIRouter(prefix="/api/entities/{{ entity.name | lower }}", tags=["{{ entity.name }}"])

@router.get("/", response_model=List[{{ entity.name }}])
async def list_{{ entity.name | lower }}():
    headers = resolve_headers([
        {% for h in entity.source.headers | default([], true) %}
        ("{{ h.key }}", "{{ h.value }}"),
        {% endfor %}
    ])
    async with httpx.AsyncClient() as client:
        response = await client.request("{{ entity.source.verb }}", "{{ entity.source.url }}", headers=headers)
        if response.status_code >= 400:
            raise HTTPException(status_code=response.status_code, detail=response.text)
        return response.json()
