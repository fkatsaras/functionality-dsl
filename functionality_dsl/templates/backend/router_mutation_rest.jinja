# ========================================================================
# AUTO-GENERATED MUTATION ROUTER
# ========================================================================

import logging
from typing import Any, Dict

from fastapi import APIRouter, HTTPException, Request
{% if endpoint.auth and endpoint.auth.kind == 'bearer' %}
from fastapi import Depends
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
security = HTTPBearer()
{% endif %}

from app.services import {{ endpoint.name | lower }}_service


{% if target %}
logger = logging.getLogger("fdsl.router.{{ endpoint.name }}.{{ target.method.lower() }}")
{% else %}
logger = logging.getLogger("fdsl.router.{{ endpoint.name }}.internal")
{% endif %}

router = APIRouter(
    prefix="{{ route_prefix }}",
    tags=["{{ endpoint.summary or endpoint.name }}"]
)


{% set pparams = endpoint.path_params or [] %}
@router.{% if target %}{{ target.method.lower() }}{% else %}post{% endif %}("", response_model=Dict[str, Any])
async def mutate_{{ endpoint.name | lower }}{% if target %}_{{ target.method.lower() }}{% endif %}(
    request: Request{% for p in pparams %}, {{ p }}: str{% endfor %}
    {% if endpoint.auth and endpoint.auth.kind == 'bearer' %}, credentials: HTTPAuthorizationCredentials = Depends(security){% endif %}
):
    """
    Mutation endpoint for {{ entity.name }}.
    {% if target %}
    Transforms input data through computation chain and forwards to {{ target.name }}.
    {% else %}
    Transforms input data through computation chain (internal endpoint, no forwarding).
    {% endif %}
    """
    # ----------------------------------------------------------------
    # Authentication
    # ----------------------------------------------------------------
    {% if endpoint.auth %}
    {% if endpoint.auth.kind == 'bearer' %}
    if not credentials or not credentials.credentials:
        raise HTTPException(status_code=401, detail="Missing bearer token")
    {% elif endpoint.auth.kind == 'basic' %}
    # Basic auth validated automatically by FastAPI
    pass
    {% elif endpoint.auth.kind == 'api_key' %}
    # API key validated automatically
    pass
    {% endif %}
    {% endif %}

    # ----------------------------------------------------------------
    # Parse request body
    # ----------------------------------------------------------------
    try:
        request_body = await request.json()
        logger.info(f"[REQUEST] - Received payload with keys: {list(request_body.keys())}")
    except Exception as parse_error:
        logger.warning(f"[REQUEST] - Failed to parse JSON body: {parse_error}")
        request_body = {}

    # ----------------------------------------------------------------
    # Delegate to service layer
    # ----------------------------------------------------------------
    try:
        path_params = {
            {% for p in pparams %}
            "{{ p }}": {{ p }}{% if not loop.last %},{% endif %}
            {% endfor %}
        }

        return await {{ endpoint.name | lower }}_service.execute_mutation(request_body, path_params)

    except HTTPException:
        raise
    except Exception as unexpected_error:
        logger.exception(f"[ERROR] - Unexpected error in mutation {{ entity.name }}")
        raise HTTPException(status_code=500, detail="Internal server error")
