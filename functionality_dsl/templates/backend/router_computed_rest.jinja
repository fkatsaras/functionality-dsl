from fastapi import APIRouter, HTTPException
from typing import List, Any, Dict

from app.core.http import get_http_client
from app.core.computed import compile_safe, safe_globals

from app.domain.models import {{ entity.name }}

# Internal endpoint-driven router
router = APIRouter(
    prefix="{{ route_prefix }}",
    tags=["{{ endpoint.summary or endpoint.name }}"]
)

_REST_INPUTS = [
{%- for it in rest_inputs %}
    {
        "alias": "{{ it.alias }}",
        "url": "{{ it.url }}",
        "headers": {%- if it.headers and it.headers|length -%}{% set hs = {} %}{% for h in it.headers %}{% set _ = hs.update({ h.key: h.value }) %}{% endfor -%}{{ hs | tojson }}{%- else -%}{ }{%- endif -%}
    },
{%- endfor %}
]

_FIELDS = {
{%- for it in rest_inputs %}
    "{{ it.alias }}": {{ it.fields | tojson }},
{%- endfor %}
}

_COMPILED = {
{%- for attr in computed_attrs %}
    "{{ attr.name }}": compile_safe({{ attr.pyexpr | tojson }}),
{%- endfor %}
}

{% if entity._where_py %}
_WHERE = compile_safe({{ entity._where_py | tojson }})
{% else %}
_WHERE = None
{% endif %}

@router.get("/", response_model=List[{{ entity.name }}], summary="List {{ entity.name }}")
async def list_{{ endpoint.name | lower }}():
    client = get_http_client()

    # Fetch upstreams
    inputs: Dict[str, Any] = {}
    for it in _REST_INPUTS:
        r = await client.get(it["url"], headers=it["headers"])
        if r.status_code >= 400:
            raise HTTPException(status_code=502, detail={"upstream_status": r.status_code, "body": r.text})

        data = r.json()
        inputs[it["alias"]] = data
        print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
        print('Entity {{ entity.name }} gets this intput: ')
        print(f"{it}")
        print(data)
        print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")

    # Single evaluation context: all upstreams available
    ctx: Dict[str, Any] = {}

    for it in _REST_INPUTS:
        alias = it["alias"]
        val = inputs[alias]
        
        ctx[alias] = {field: val for field in _FIELDS[alias]}

    # Build one row with all computed attributes
    row: Dict[str, Any] = {}
    for name, code in _COMPILED.items():
        row[name] = eval(code, safe_globals, {"ctx": ctx})

    # Optional filter
    if _WHERE is not None:
        ok = bool(eval(_WHERE, safe_globals, {"row": row, "ctx": ctx}))
        if not ok:
            return []
    

    print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
    print('Entity {{ entity.name }} spits out this data: ')
    print(str([{{ entity.name }}(**row)]))
    print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")

    return [{{ entity.name }}(**row)]
