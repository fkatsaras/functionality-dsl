<script lang="ts">
    import { onMount, tick } from 'svelte';


    const {
        src = [[ src | tojson ]],
        columns = [[ columns | tojson ]],
        primaryKey = [[ primaryKey | tojson ]]
    } = $props<{
        src?: string;
        columns?: Array<{ key: string, label: string }>;
        primaryKey?: string;
    }>();

    let data = $state<any[]>([]);
    let loading = $state(true);
    let error = $state<string | null>(null);

    async function load() {
        loading = true;
        error = null;

        try {
            const response = await fetch(src);

            if (!response.ok) throw new Error(`${response.status} ${response.statusText}`);
            data = await response.json();
        } catch (e: any) {
            error = e?.message ?? 'Failed to load data from source.';
        } finally {
            loading = false;
        }
    }

    function colValue(row: any, key: string) {
        // safe access for nested props like "author.name"
        return key.split('.').reduce((acc: any, k: string) => (acc ? acc[k] : undefined), row);
    }

    onMount(async () => {
      await tick();
      await load();
      console.log('loading?', loading, 'rows:', data.length, 'error:', error);
    });
</script>

<div class="w-full">
    <div class="mb-3 flex items-center gap-3">
        <h2 class="text-base font-approachmono text-text/90 tracking-tight">{name}</h2>
        <button
            class="px-3 py-1 text-xs rounded-lg border thin-border bg-[color:var(--surface)] hover:bg-[color:var(--edge-soft)] transition disabled:opacity-60"
            on:click={load}
            disabled={loading}
            aria-label="Refresh"
        >
            {loading ? 'Loading...' : 'Refresh'}
        </button>
        {#if error}
            <span class="text-xs text-dag-danger">{error}</span>
        {/if}
    </div>

    <div class="overflow-auto rounded-xl2 shadow-card border table-border bg-[color:var(--card)]">
        <table class="min-w-full border-collapse text-sm">
            <thead class="bg-[color:var(--surface)] sticky top-0 z-10"></thead>
                <tr>
                    {#each columns as c}
                      <th class="text-left font-approachmono font-medium text-text/90 px-3 py-2 border-b thin-border">
                        {c.label}
                      </th>
                    {/each}
                </tr>


            <tbody>
                {#if loading}
                    <tr>
                      <td class="font-approachmono px-3 py-4 text-text-muted" colspan={columns.length}>Loadingâ€¦</td>
                    </tr>
                {:else if error}
                    <tr>
                      <td class="font-approachmono px-3 py-4 text-dag-danger" colspan={columns.length}>{error}</td>
                    </tr>
                {:else if data.length === 0}
                    <tr>
                      <td class="font-approachmono px-3 py-4 text-text-muted" colspan={columns.length}>No data</td>
                    </tr>
                {:else}
                    {#each data as row, i (`${row?.id ?? row?.[primaryKey] ?? JSON.stringify(row)}-${i}`)}
                            <tr class="font-approachmono odd:bg-transparent even:bg-[color:var(--surface)] hover:bg-[color:var(--edge-soft)] transition-colors">
                                {#each columns as c}
                                    <td class="px-3 py-2 border-b thin-border text-text/90">
                                        {colValue(row, c.key)}
                                    </td>
                                {/each}
                            </tr>
                    {/each}
                {/if}
            </tbody>
        </table>
    </div>
</div>

<style>
    .font-approachmono {
      font-family: "Approach Mono", ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    }
    .thin-border, .table-border { border-color: var(--edge); }
</style>