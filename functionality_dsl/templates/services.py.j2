{% raw -%}
\"\"\"AUTO-GENERATED query helpers that replay DataPipelines.\"\"\"

from sqlalchemy.orm import Session
from . import models

{% macro render_cond(node, mdl='models') -%}
    {%- if node.__class__.__name__ == 'Condition' -%}
        {{ render_cond(node.left) }}
        {%- for i in range(node.op|length) %}
            {{ ' & ' if node.op[i] == 'and' else ' | ' if node.op[i] == 'or' else ' ~ ' }}
            {{ render_cond(node.right[i]) }}
        {%- endfor -%}
    {%- elif node.__class__.__name__ == 'PrimitiveCondition' -%}
        {{ mdl }}.{{ node.AttributeRef.attr.entity.name }}.{{ node.AttributeRef.attr.name }}
        {{ _op_map(node.comp) }}
        {{ _val(node.value) }}
    {%- endif -%}
{%- endmacro %}

{% for pipe in pipelines %}
def {{ pipe.name|lower }}_list(db: Session):
    q = db.query(models.{{ pipe.entity.name }})
    {# --- apply steps in declared order --- #}
    {% for step in pipe.steps %}
        {%- if step.__class__.__name__ == 'FilterStep' %}
    q = q.filter({{ render_cond(step.condition) }})
        {%- elif step.__class__.__name__ == 'SelectStep' %}
    q = q.with_entities({{ ', '.join('models.' + pipe.entity.name + '.' + f.name for f in step.fields) }})
        {%- elif step.__class__.__name__ == 'ComputeStep' %}
    # compute: {{ step.name }} = {{ step.expression.expr }}
    q = q.add_columns({{ step.expression.expr }})
        {%- elif step.__class__.__name__ == 'SortStep' %}
    q = q.order_by({{ ', '.join('(models.' + pipe.entity.name + '.' + sk.field + '.desc())' if sk.order == "DESC" else '(models.' + pipe.entity.name + '.' + sk.field + '.asc())' for sk in step.sortKeys) }})
        {%- elif step.__class__.__name__ == 'PaginateStep' %}
    q = q.limit({{ step.pageSize }}).offset({{ step.pageNumber or 0 }} * {{ step.pageSize }})
        {%- endif %}
    {% endfor %}
    return q.all()
{% endfor %}
{% endraw %}