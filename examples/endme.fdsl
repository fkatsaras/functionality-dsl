// ===== Components =====
Client WebApp
  host: "localhost"
  port: 3000
end

Server BookAPI
  host: "api.myapp.com"
  port: 8080
  base: "/"
end

Database PostgresDB
  host: "localhost"
  port: 5432
  schema: "booksresponsere"
end


// ===== Endpoints =====
RESTEndpoint BooksList
  server: BookAPI
  verb: GET
  path: "/books"
end

RESTEndpoint BooksCreate
  server: BookAPI
  verb: POST
  path: "/books"
end

RESTEndpoint AuthorGet
  server: BookAPI
  verb: GET
  path: "/authors/{id}"
end

RESTEndpoint BookUpdate
  server: BookAPI
  verb: PUT
  path: "/books/{id}"
end

RESTEndpoint BookDelete
  server: BookAPI
  verb: DELETE
  path: "/books/{id}"
end


// ===== Models (DB entities) =====
Model Author
  source: PostgresDB
  table: "authors"
  attributes:
    - id: int pk
    - name: string required
end

Model Book
  source: PostgresDB
  table: "books"
  attributes:
    - id: int pk
    - isbn: string required
    - title: string required
    - author_id: int required
    - price: float default= 0.00         // was decimal(10,2)
    - published_at: datetime            // optional by default
    - status: string default= "active"
end


// ===== DTOs (frontend payloads) =====
Request AuthorRequest
  base: Author
  attributes:
    - id: int
end

Request BookRequest
  base: Book
  attributes:
    - id: int
end

Request BookCreateRequest
  base: Book
  attributes:
    - isbn: string
    - title: string
    - author_id: int
    - price: float
    - published_at: datetime
end

Request BookUpdateInput
  base: Book
  attributes:
    - title: string
    - price: float
    - published_at: datetime
    - status: string
end

Request BookFilter
  base: Book
  attributes:
    - q: string
    - author_id: int
    - sort: string
    - order: string
    - page: int
    - per_page: int
end


// ===== Views (projections) =====
Response BookView
  attributes:
    - id: int
    - isbn: string
    - title: string
    - author_id: int
    - author_name: string
    - price: float
end

Response AuthorView
  attributes:
    - id: int
    - name: string
end

Response Error
  attributes:
    - code: string
    - message: string
    - details: dict
end

// Convenience response for list endpoints
Response BookViewList
  attributes:
    - items: dict
    - page: int
    - per_page: int
    - total: int
end

// ===== Actions (new syntax) =====
Action ListBooks
  using: BooksList
  request: BookFilter
  response:
    - 200: BookViewList
    - 400: Error
    - 401: Error
end

Action CreateBook
  using: BooksCreate
  request: BookCreateRequest
  response:
    - 201: BookView
    - 400: Error
    - 401: Error
    - 409: Error
end

Action UpdateBook
  using: BookUpdate
  request: BookUpdateInput
  response:
    - 200: BookView
    - 400: Error
    - 404: Error
end

Action DeleteBook
  using: BookDelete
  request: BookRequest
  response:
    - 204: None
    - 404: Error
end

Action GetAuthor
  using: AuthorGet
  request: AuthorRequest
  response:
    - 200: AuthorView
    - 404: Error
end
