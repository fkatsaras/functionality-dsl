Server Main
  host: "0.0.0.0"
  port: 8080
  base: "/api"
end

Security JWTAuth
  auth: JWT
  roles: admin, user
end

Database<Postgres> DB
  host: "localhost"
  port: 5432
  database: "warehouse"
  auth:
    username: "appuser"
    password: "secret"
  ssl: false
end

Entity Product
  database: DB
  table: "products"
  attributes:
    - id: uuid pk
    - name: string required
    - category: string
    - description: string
    - price: number
end

Method ProductList
  type: GET
  description: "Retrieve all products"
  responses:
    - 200: { description: "List of products", content: [Product] }
end

Method ProductCreate
  type: POST
  description: "Create a new product"
  requestBody:
    content: Product
    required
  responses:
    - 201: { description: "Product created", content: Product }
end

Method ProductGet
  type: GET
  description: "Retrieve a product by ID"
  parameters:
    - id: uuid (path, required)
  responses:
    - 200: { description: "Product found", content: Product }
    - 404: { description: "Not found" }
end

Method ProductUpdate
  type: PUT
  description: "Update a product by ID"
  parameters:
    - id: uuid (path, required)
  requestBody:
    content: Product
  responses:
    - 200: { description: "Product updated", content: Product }
    - 404: { description: "Not found" }
end

Method ProductDelete
  type: DELETE
  description: "Delete a product by ID"
  parameters:
    - id: uuid (path, required)
  responses:
    - 204: { description: "Deleted" }
    - 404: { description: "Not found" }
end


Endpoint Products
  base: "/products"
  entity: Product
  server: Main
  methods:
    - ProductList
    - ProductCreate
    - ProductGet
    - ProductUpdate
    - ProductDelete
end

Subscription ProductStream
  path: "/ws/products"
  entity: Product
  events: created, updated, deleted
end