Client WebApp
  host: "localhost"
  port: 3000
end

Server BookAPI
  host: 'localhost'
  port: 8080
end

Database PostgresDB
  host: "localhost"
  port: 5432
  schema: "bookstore"
end

// --- Endpoints ---
RESTEndpoint BooksList
  verb: GET
  host: "api.myapp.com"
  port: 8080
  path: "/books"
end

RESTEndpoint BooksCreate
  verb: POST
  host: "api.myapp.com"
  port: 8080
  path: "/books"
end

RESTEndpoint AuthorGet
  verb: GET
  host: "api.myapp.com"
  port: 8080
  path: "/authors/{id}"
end

RESTEndpoint BookUpdate
  verb: PUT
  host: "api.myapp.com"
  port: 8080
  path: "/books/{id}"
end

RESTEndpoint BookDelete
  verb: DELETE
  host: "api.myapp.com"
  port: 8080
  path: "/books/{id}"
end

// --- DB entities (models) ---
Entity Author
  type: model
  source: PostgresDB
  table: "authors"
  attributes:
    - id: int pk
    - name: string required
end

Entity Book
  type: model
  source: PostgresDB
  table: "books"
  attributes:
    - id: int pk
    - isbn: string required
    - title: string required
    - author_id: int required
    - price: number
    - published_at: datetime
end

// --- Frontend DTOs (payloads) ---
Entity AuthorRequest
  type: payload
  source: WebApp
  attributes:
    - name: string
end

Entity BookDeleteRequest
  type: payload
  source: WebApp
  attributes:
    - name: string
end

Entity BookCreateRequest
  type: payload
  source: WebApp
  attributes:
    - isbn: string required
    - title: string required
    - author_id: int required
    - price: number
    - published_at: datetime
end

Entity BookUpdateInput
  type: payload
  source: WebApp
  attributes:
    - title: string
    - price: number
    - published_at: datetime
end

Entity BookFilter
  type: payload
  source: WebApp
  attributes:
    - title: string
    - author_id: int
end

// --- Backend payloads (response shapes/messages) ---
Entity BookView
  type: payload
  source: BooksList
  attributes:
    - id: int
    - isbn: string
    - title: string
    - author_id: int
    - price: number
end

// --- Actions (wire DTOs <-> models via endpoints) ---
Action ListBooks
  from: BookFilter
  to: BookView
  using: BooksList
end

Action CreateBook
  from: BookCreateRequest
  to: Book
  using: BooksCreate
  validates: Book
end

Action UpdateBook
  from: BookUpdateInput
  to: Book
  using: BookUpdate
  validates: Book
end

Action DeleteBook
  from: BookDeleteRequest
  to: Book
  using: BookDelete
end

Action GetAuthor
  from: AuthorRequest
  to: Author
  using: AuthorGet
end
