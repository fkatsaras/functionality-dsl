// --- Server ----------------------------------------------------
Server AuthServer
  host: "localhost"
  port: 8081
  cors: "http://localhost:3000"
end

// --- External Endpoints (requires a custom dummy db container) -
Source<REST> UserRegisterExternal
  url: "http://dummydb:9000/db/users/register"
  verb: POST
  entity: NewUser
end

Source<REST> UserLoginExternal
  url: "http://dummydb:9000/db/users/login"
  verb: POST
  entity: LoginValidated
end

Source<REST> UserList
  url: "http://dummydb:9000/db/users"
  verb: GET
end

// --- Entities --------------------------------------------------
Entity ExistingUsers
  source: UserList
  attributes:
    - users: list = UserList;
end

// ---------------- REGISTER FLOW ----------------
APIEndpoint<REST> UserRegister
  path: "/api/auth/register"
  verb: POST
  entity: RegisterPayload
end

Entity RegisterPayload
  source: UserRegister
  attributes:
    - username: string = UserRegister.username;
    - email:    string = UserRegister.email;
    - password: string = UserRegister.password if len(UserRegister.password) > 5 else error(400, "Weak password");
end

Entity NewUser(RegisterPayload)
  attributes:
    - user: dict = {
        "username": RegisterPayload.username,
        "email":    RegisterPayload.email,
        "password": RegisterPayload.password
      };
end

// ---------------- LOGIN FLOW ----------------
APIEndpoint<REST> UserLogin
  path: "/api/auth/login"
  verb: POST
  entity: LoginPayload
end

Entity LoginPayload
  source: UserLogin
  attributes:
    - username: string = UserLogin.username;
    - password: string = UserLogin.password;
end

Entity LoginCandidates(LoginPayload, ExistingUsers)
  attributes:
    - match: dict = (
        [u for u in ExistingUsers.users
         if u["username"] == LoginPayload.username
         and u["password"] == LoginPayload.password][0]
        if len([u for u in ExistingUsers.users
                if u["username"] == LoginPayload.username
                and u["password"] == LoginPayload.password]) > 0
        else None
      );
end

Entity LoginValidated(LoginCandidates, LoginPayload)
  attributes:
    - username: string = (
        LoginCandidates.match["username"]
        if LoginCandidates.match != None
        else error(401, "Invalid username")
      );
    - password: string = (
        LoginCandidates.match["password"]
        if LoginCandidates.match != None
        else error(401, "Invalid password")
      );
end

// ---------------- UI ----------------
Component<ActionForm> RegisterForm
  endpoint: UserRegister
  fields: [username, email, password]
  submitLabel: "Register"
end

Component<ActionForm> LoginForm
  endpoint: UserLogin
  fields: [username, password]
  submitLabel: "Login"
end