// ============================================================
// Server Configuration
// ============================================================
Server AuthServer
  host: "localhost"
  port: 8081
  cors: "http://localhost:5173"
  loglevel: debug
end

// ============================================================
// External Endpoints (dummy DB interfaces)
// ============================================================
Source<REST> UserRegisterExternal
  url: "http://dummydb:9000/db/users/register"
  verb: POST
  entity: NewUser
end

Source<REST> UserLoginExternal
  url: "http://dummydb:9000/db/users/login"
  verb: POST
  entity: LoginValidated
end

Source<REST> Users
  url: "http://dummydb:9000/db/users"
  verb: GET
end

Source<REST> ResetPasswordExternal
  url: "http://dummydb:9000/db/users/reset-password"
  verb: PUT
  entity: ResetPasswordPayload
end

Source<REST> UserUpdateExternal
  url: "http://dummydb:9000/db/users/{id}" 
  verb: PATCH
  entity: UserUpdatePayload
end

Source<REST> UserDeleteExternal
  url: "http://dummydb:9000/db/users/{id}"
  verb: DELETE
  entity: UserDeletePayload
end

// ============================================================
// Public endpoint (no auth)
// ============================================================
APIEndpoint<REST> UserList
  path: "/api/users"
  verb: GET
  entity: ExistingUsers
end

Entity ExistingUsers
  source: Users
  attributes:
    - users: list = Users;
end

// ============================================================
// Authenticated endpoints
// ============================================================

// --- REGISTER ---
APIEndpoint<REST> UserRegister
  path: "/api/users/register"
  verb: POST
  entity: NewUser
  auth:
    type: bearer
    token: "required"
end

Entity NewUser
  source: UserRegister
  attributes:
    - user: dict = {
        "username": trim(UserRegister.username),
        "password": UserRegister.password,
        "email":    trim(UserRegister.email)
      };
  validations:
    - require(len(UserRegister.password) > 5, "Password must be at least 6 characters", 400);
    - require(validate_email(UserRegister.email), "Invalid email format", 400);
    - require(in_range(len(UserRegister.username), 3, 50), "Username must be 3-50 characters", 400);
end

// --- LOGIN (public) ---
APIEndpoint<REST> UserLogin
  path: "/api/users/login"
  verb: POST
  entity: LoginPayload
end

Entity LoginPayload
  source: UserLogin
  attributes:
    - username: string = trim(UserLogin.username);
    - password: string = trim(UserLogin.password);
end

Entity LoginCandidates(LoginPayload, ExistingUsers)
  attributes:
    - matches: list = filter(ExistingUsers.users, u -> 
        (u["username"] == LoginPayload.username and u["password"] == LoginPayload.password)
      );
    - match: dict = find(ExistingUsers.users, u ->
        (u["username"] == LoginPayload.username and u["password"] == LoginPayload.password)
      );
end

Entity LoginValidated(LoginCandidates)
  attributes:
    - username: string = LoginCandidates.match["username"];
    - password: string = LoginCandidates.match["password"];
  validations:
    - require(LoginCandidates.match != null, "Invalid username or password", 401);
end

// --- RESET PASSWORD ---
APIEndpoint<REST> ResetPassword
  path: "/api/users/reset-password"
  verb: PUT
  entity: ResetPasswordRequest
  auth:
    type: bearer
    token: "required"
end

Entity ResetPasswordRequest
  source: ResetPassword
  attributes:
    - email: string = trim(ResetPassword.email);
    - newPassword: string = ResetPassword.newPassword;
end

Entity CurrentUser(ExistingUsers, ResetPasswordRequest)
  attributes:
    - user: dict = find(ExistingUsers.users, u -> u["email"] == ResetPasswordRequest.email);
  validations:
    - require(CurrentUser.user != null, "User not found", 404);
end

Entity ResetPasswordPayload(CurrentUser, ResetPasswordRequest)
  attributes:
    - email: string = ResetPasswordRequest.email;
    - newPassword: string = ResetPasswordRequest.newPassword;
  validations:
    - require(len(ResetPasswordPayload.newPassword) > 5, "New password must be at least 6 characters", 400);
    - require(CurrentUser.user.password != ResetPasswordPayload.newPassword, "New password must be different from old one", 400);
end

// --- UPDATE USER ---
APIEndpoint<REST> UserUpdate
  path: "/api/users/{id}/update"
  verb: PATCH
  entity: UserUpdatePayload
  auth:
    type: bearer
    token: "required"
end

Entity UserUpdatePayload
  source: UserUpdate
  attributes:
    - id: int = int(UserUpdate.id);
    - email: string = trim(UserUpdate.email);
    - password: string = UserUpdate.password;
  validations:
    - require(UserUpdatePayload.id > 0, "Invalid user ID", 400);
end

// --- DELETE USER ---
APIEndpoint<REST> UserDelete
  path: "/api/users/{id}/delete"
  verb: DELETE
  entity: UserDeletePayload
  auth:
    type: bearer
    token: "required"
end

Entity UserDeletePayload
  source: UserDelete
  attributes:
    - id: int = int(UserDelete.id);
  validations:
    - require(UserDeletePayload.id > 0, "Invalid user ID", 400);
end

// ============================================================
// UI Components (unchanged)
// ============================================================
Component<ActionForm> RegisterForm
  endpoint: UserRegister
  fields: [username, email, password]
  submitLabel: "Register"
end

Component<ActionForm> LoginForm
  endpoint: UserLogin
  fields: [username, password]
  submitLabel: "Login"
end

Component<ActionForm> ResetPasswordForm
  endpoint: ResetPassword
  fields: [email, newPassword]
  submitLabel: "Reset Password"
end

Component<ActionForm> UpdateUserForm
  endpoint: UserUpdate
  fields: [id, email, password]
  submitLabel: "Update User"
end

Component<ActionForm> DeleteUserForm
  endpoint: UserDelete
  fields: [id]
  submitLabel: "Delete User"
end

Component<Table> UserTable
  endpoint: UserList
  colNames: ["id", "username", "email", "password"]
end
