// --- Server ----------------------------------------------------
Server AuthServer
  host: "localhost"
  port: 8081
  cors: "http://localhost:3000"
  loglevel: debug
end

// --- External Endpoints (requires a custom dummy db container) -
Source<REST> UserRegisterExternal
  url: "http://dummydb:9000/db/users/register"
  verb: POST
  entity: NewUser
end

Source<REST> UserLoginExternal
  url: "http://dummydb:9000/db/users/login"
  verb: POST
  entity: LoginValidated
end

Source<REST> UserList
  url: "http://dummydb:9000/db/users"
  verb: GET
end

// --- Entities --------------------------------------------------
Entity ExistingUsers
  source: UserList
  attributes:
    - users: list = UserList;
end

// ---------------- REGISTER FLOW ----------------
APIEndpoint<REST> UserRegister
  path: "/api/auth/register"
  verb: POST
  entity: RegisterPayload
end

Entity RegisterPayload
  source: UserRegister
  attributes:
    - username: string = trim(UserRegister.username);
    - email:    string = trim(UserRegister.email);
    - password: string = UserRegister.password;
  validations:
    - require(len(RegisterPayload.password) > 5, "Password must be at least 6 characters", 400);
    - require(validate_email(RegisterPayload.email), "Invalid email format", 400);
    - require(in_range(len(RegisterPayload.username), 3, 50), "Username must be 3-50 characters", 400);
end

Entity NewUser(RegisterPayload)
  attributes:
    - user: dict = {
        "username": RegisterPayload.username,
        "email":    RegisterPayload.email,
        "password": RegisterPayload.password
      };
end

// ---------------- LOGIN FLOW ----------------
APIEndpoint<REST> UserLogin
  path: "/api/auth/login"
  verb: POST
  entity: LoginPayload
end

Entity LoginPayload
  source: UserLogin
  attributes:
    - username: string = trim(UserLogin.username);
    - password: string = trim(UserLogin.password);
end

Entity LoginCandidates(LoginPayload, ExistingUsers)
  attributes:
    - matches: list = filter(ExistingUsers.users, u -> 
      ( u["username"] == LoginPayload.username and u["password"] == LoginPayload.password)
    );
    - match: dict = find(ExistingUsers.users, u -> 
      (u["username"] == LoginPayload.username and u["password"] == LoginPayload.password)
    );
end

Entity LoginValidated(LoginCandidates)
  attributes:
    - username: string = LoginCandidates.match["username"];
    - password: string = LoginCandidates.match["password"];
  validations:
    - require(LoginCandidates.match != None, "Invalid username or password", 401);
end

// ---------------- UI Components ----------------
Component<ActionForm> RegisterForm
  endpoint: UserRegister
  fields: [username, email, password]
  submitLabel: "Register"
end

Component<ActionForm> LoginForm
  endpoint: UserLogin
  fields: [username, password]
  submitLabel: "Login"
end
