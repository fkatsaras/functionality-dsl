Server AuthServer
  host: "localhost"
  port: 8081
  cors: "http://localhost:5173"
  loglevel: debug
end

// ============================================================
// External Endpoints (dummy DB interfaces)
// ============================================================
Source<REST> UserRegisterExternal
  url: "http://dummydb:9000/db/users/register"
  verb: POST
  entity: NewUser
end

Source<REST> UserLoginExternal
  url: "http://dummydb:9000/db/users/login"
  verb: POST
  entity: LoginValidated
end

Source<REST> Users
  url: "http://dummydb:9000/db/users"
  verb: GET
end

Source<REST> ResetPasswordExternal
  url: "http://dummydb:9000/db/users/reset-password"
  verb: PUT
  entity: ResetPasswordPayload
end

Source<REST> UserUpdateExternal
  url: "http://dummydb:9000/db/users/{id}" 
  verb: PATCH
  entity: UserUpdatePayload
end

Source<REST> UserDeleteExternal
  url: "http://dummydb:9000/db/users/{id}"
  verb: DELETE
  entity: UserDeletePayload
end

APIEndpoint<REST> UserList
  path: "/api/users"
  verb: GET
  entity: ExistingUsers
end

Entity ExistingUsers
  source: Users
  attributes:
    - users: list = Users;
end

// --- REGISTER ---
APIEndpoint<REST> UserRegister
  path: "/api/users/register"
  verb: POST
  entity: UserRegisterRequest
end

Entity UserRegisterRequest
  source: UserRegister
  attributes:
    - username: string(3..50) = trim(UserRegister.username);
    - password: string(6..) = UserRegister.password;
    - email: string @email = trim(UserRegister.email);
end

Entity NewUser(UserRegisterRequest)
  attributes:
    - user: dict = {
        "username": UserRegisterRequest.username,
        "password": UserRegisterRequest.password,
        "email": UserRegisterRequest.email
      };
end

// --- LOGIN (public) ---
APIEndpoint<REST> UserLogin
  path: "/api/users/login"
  verb: POST
  entity: LoginPayload
end

Entity LoginPayload
  source: UserLogin
  attributes:
    - username: string = trim(UserLogin.username);
    - password: string = trim(UserLogin.password);
end

Entity LoginCandidates(LoginPayload, ExistingUsers)
  attributes:
    - match: dict = find(ExistingUsers.users, u ->
        (u["username"] == LoginPayload.username and u["password"] == LoginPayload.password)
      ) @validate(this != null, "Invalid username or password", 401);
end

Entity LoginValidated(LoginCandidates)
  attributes:
    - username: string = LoginCandidates.match["username"];
    - password: string = LoginCandidates.match["password"];
end

// --- RESET PASSWORD ---
APIEndpoint<REST> ResetPassword
  path: "/api/users/reset-password"
  verb: PUT
  entity: ResetPasswordRequest
end

Entity ResetPasswordRequest
  source: ResetPassword
  attributes:
    - email: string @email = trim(ResetPassword.email);
    - newPassword: string(6..) = ResetPassword.newPassword;
end

Entity CurrentUser(ExistingUsers, ResetPasswordRequest)
  attributes:
    - user: dict = find(ExistingUsers.users, u -> u["email"] == ResetPasswordRequest.email) 
    @validate(this != null, "User not found", 404);
end

Entity ResetPasswordPayload(CurrentUser, ResetPasswordRequest)
  attributes:
    - email: string @email = ResetPasswordRequest.email;
    - newPassword: string(6..) = ResetPasswordRequest.newPassword
      @validate(CurrentUser.user["password"] != this, "New password must be different from old one", 400);
end

// --- UPDATE USER ---
APIEndpoint<REST> UserUpdate
  path: "/api/users/{id}/update"
  verb: PATCH
  entity: UserUpdatePayload
end

Entity UserUpdatePayload
  source: UserUpdate
  attributes:
    - id: int = int(UserUpdate$id);
    - email: string @email = trim(UserUpdate.email);
    - password: string(6..) = UserUpdate.password;
end

// --- DELETE USER ---
APIEndpoint<REST> UserDelete
  path: "/api/users/{id}/delete"
  verb: DELETE
  entity: UserDeletePayload
end

Entity UserDeletePayload
  source: UserDelete
  attributes:
    - id: int = int(UserDelete$id);
end

// ============================================================
// UI Components 
// ============================================================
Component<ActionForm> RegisterForm
  endpoint: UserRegister
  fields: [username, email, password]
  submitLabel: "Register"
end

Component<ActionForm> LoginForm
  endpoint: UserLogin
  fields: [username, password]
  submitLabel: "Login"
end

Component<ActionForm> ResetPasswordForm
  endpoint: ResetPassword
  fields: [email, newPassword]
  submitLabel: "Reset Password"
end

Component<ActionForm> UpdateUserForm
  endpoint: UserUpdate
  fields: [id, email, password]
  submitLabel: "Update User"
end

Component<ActionForm> DeleteUserForm
  endpoint: UserDelete
  fields: [id]
  submitLabel: "Delete User"
end

Component<Table> UserTable
  endpoint: UserList
  colNames: ["id", "username", "email", "password"]
end
