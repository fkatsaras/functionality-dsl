// ========================================================================
// PATH PARAMETER TEST SUITE
// ========================================================================
// Tests various path parameter scenarios:
// 1. Single path param (numeric)
// 2. Multiple path params
// 3. Path params in external URL interpolation
// 4. Path params in validations
// 5. Path params with type coercion
// 6. Path params in computed attributes
// ========================================================================

// --- Server Configuration ----------------------------------------------
Server TestServer
  host: "localhost"
  port: 8080
  cors: "http://localhost:3000"
  loglevel: debug
end

// ========================================================================
// TEST 1: Single Numeric Path Parameter (GET)
// ========================================================================
// Test: GET /api/users/123
// Expected: userId is normalized to int(123)

APIEndpoint<REST> GetUserById
  path: "/api/users/{userId}"
  verb: GET
  entity: UserById
end

Entity UserById
  source: GetUserById
  attributes:
    - userId: int = int(GetUserById.userId);
    - userIdType: string = str(GetUserById.userId);
    - isNumeric: bool = GetUserById.userId > 0;
  validations:
    - require(UserById.userId > 0, "User ID must be positive", 400);
end

// ========================================================================
// TEST 2: Multiple Path Parameters (GET)
// ========================================================================
// Test: GET /api/organizations/acme/users/123
// Expected: Both params normalized and accessible

APIEndpoint<REST> GetOrgUser
  path: "/api/organizations/{orgId}/users/{userId}"
  verb: GET
  entity: OrgUser
end

Entity OrgUser
  source: GetOrgUser
  attributes:
    - orgId: string = str(GetOrgUser.orgId);
    - userId: int = int(GetOrgUser.userId);
    - fullPath: string = GetOrgUser.orgId + "/" + str(GetOrgUser.userId);
  validations:
    - require(len(OrgUser.orgId) > 0, "Organization ID required", 400);
    - require(OrgUser.userId > 0, "User ID must be positive", 400);
end

// ========================================================================
// TEST 4: Path Param in Mutation with Validation (PATCH)
// ========================================================================
// Test: PATCH /api/users/123/update
// Expected: Path param validated before forwarding

APIEndpoint<REST> UpdateUser
  path: "/api/users/{userId}/update"
  verb: PATCH
  entity: UserUpdatePayload
end

Entity UserUpdatePayload
  source: UpdateUser
  attributes:
    - userId: int = int(UpdateUser.userId);
    - name: string = trim(UpdateUser.name);
    - email: string = trim(UpdateUser.email);
  validations:
    - require(UserUpdatePayload.userId > 0, "Invalid user ID", 400);
    - require(len(UserUpdatePayload.name) >= 2, "Name must be at least 2 characters", 400);
    - require(validate_email(UserUpdatePayload.email), "Invalid email format", 400);
end

Source<REST> UserUpdateExternal
  url: "https://httpbin.org/anything/users/{userId}"
  verb: PATCH
  entity: UserUpdatePayload
end

// ========================================================================
// TEST 5: Path Param with Transformation Chain (POST)
// ========================================================================
// Test: POST /api/orders/ORD-123/items
// Expected: orderId extracted, normalized, and passed through chain

APIEndpoint<REST> CreateOrderItem
  path: "/api/orders/{orderId}/items"
  verb: POST
  entity: OrderItemRequest
end

Entity OrderItemRequest
  source: CreateOrderItem
  attributes:
    - orderId: string = upper(CreateOrderItem.orderId);
    - productId: int = CreateOrderItem.productId;
    - quantity: int = CreateOrderItem.quantity;
end

Entity OrderItemValidated(OrderItemRequest)
  attributes:
    - orderId: string = OrderItemRequest.orderId;
    - productId: int = OrderItemRequest.productId;
    - quantity: int = OrderItemRequest.quantity;
    - totalItems: int = OrderItemRequest.quantity;
  validations:
    - require(len(OrderItemValidated.orderId) > 0, "Order ID required", 400);
    - require(OrderItemValidated.productId > 0, "Invalid product ID", 400);
    - require(in_range(OrderItemValidated.quantity, 1, 100), "Quantity must be 1-100", 400);
end

Entity OrderItemEnriched(OrderItemValidated)
  attributes:
    - orderId: string = OrderItemValidated.orderId;
    - productId: int = OrderItemValidated.productId;
    - quantity: int = OrderItemValidated.quantity;
    - status: string = "pending";
    - timestamp: string = "2025-01-01T00:00:00Z";
end

Source<REST> OrderItemCreate
  url: "https://httpbin.org/anything/orders/{orderId}/items"
  verb: POST
  entity: OrderItemEnriched
end

// ========================================================================
// TEST 6: Path Param Type Coercion (DELETE)
// ========================================================================
// Test: DELETE /api/products/456
// Expected: productId auto-converted to int

APIEndpoint<REST> DeleteProduct
  path: "/api/products/{productId}"
  verb: DELETE
  entity: ProductDeletePayload
end

Entity ProductDeletePayload
  source: DeleteProduct
  attributes:
    - productId: int = int(DeleteProduct.productId);
    - deletedAt: string = "2025-01-01T00:00:00Z";
  validations:
    - require(ProductDeletePayload.productId > 0, "Invalid product ID", 400);
end

Source<REST> ProductDeleteExternal
  url: "https://httpbin.org/anything/products/{productId}"
  verb: DELETE
  entity: ProductDeletePayload
end

// ========================================================================
// TEST 7: Mixed Path Params and Body Fields (PUT)
// ========================================================================
// Test: PUT /api/categories/electronics/products/789
// Expected: Both path params accessible alongside body fields

APIEndpoint<REST> UpdateCategoryProduct
  path: "/api/categories/{categoryId}/products/{productId}"
  verb: PUT
  entity: CategoryProductUpdate
end

Entity CategoryProductUpdate
  source: UpdateCategoryProduct
  attributes:
    - categoryId: string = lower(str(UpdateCategoryProduct.categoryId));
    - productId: int = int(UpdateCategoryProduct.productId);
    - name: string = trim(str(UpdateCategoryProduct.name));
    - price: float = float(UpdateCategoryProduct.price);
  validations:
    - require(len(CategoryProductUpdate.categoryId) > 0, "Category required", 400);
    - require(CategoryProductUpdate.productId > 0, "Invalid product ID", 400);
    - require(CategoryProductUpdate.price > 0.0, "Price must be positive", 400);
end

Source<REST> CategoryProductUpdateExternal
  url: "https://httpbin.org/anything/categories/{categoryId}/products/{productId}"
  verb: PUT
  entity: CategoryProductUpdate
end

// ========================================================================
// TEST 8: Path Param in Computed Attribute Expression (GET)
// ========================================================================
// Test: GET /api/calculations/5/square
// Expected: Computed attribute uses path param in expression

APIEndpoint<REST> SquareCalculation
  path: "/api/calculations/{number}/square"
  verb: GET
  entity: SquareResult
end

Entity SquareResult
  source: SquareCalculation
  attributes:
    - input: int = SquareCalculation.number;
    - result: int = SquareCalculation.number * SquareCalculation.number;
    - operation: string = "square";
  validations:
    - require(in_range(SquareResult.input, 1, 1000), "Number must be 1-1000", 400);
end

// ========================================================================
// TEST 9: Path Param Precedence Over Body Field (POST)
// ========================================================================
// Test: POST /api/conflict/999 with body {"userId": 111}
// Expected: Path param (999) overwrites body field (111)

APIEndpoint<REST> ConflictTest
  path: "/api/conflict/{userId}"
  verb: POST
  entity: ConflictPayload
end

Entity ConflictPayload
  source: ConflictTest
  attributes:
    - userId: int = ConflictTest.userId;
    - message: string = "Path param wins: " + str(ConflictTest.userId);
end

Source<REST> ConflictExternal
  url: "https://httpbin.org/anything/conflict"
  verb: POST
  entity: ConflictPayload
end

// ========================================================================
// TEST 10: String Path Param (No Coercion Needed) (GET)
// ========================================================================
// Test: GET /api/slugs/my-awesome-post
// Expected: slug remains string (no numeric coercion)

APIEndpoint<REST> GetBySlug
  path: "/api/slugs/{slug}"
  verb: GET
  entity: SlugData
end

Entity SlugData
  source: GetBySlug
  attributes:
    - slug: string = GetBySlug.slug;
    - slugType: string = str(GetBySlug.slug);
    - isString: bool = len(GetBySlug.slug) > 0;
  validations:
    - require(len(SlugData.slug) >= 3, "Slug must be at least 3 characters", 400);
end