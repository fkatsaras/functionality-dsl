// --- SERVER ----------------------------------------------------
Server IoTServer
  host: "localhost"
  port: 8085
  cors: "http://localhost:3000"
end

// --- EXTERNAL REST SERVICES ------------------------------------
ExternalREST DeviceRegistry
  url: "http://dummyexternals:9500/api/devices"
  verb: GET
end

ExternalREST DeviceRegisterExternal
  url: "http://dummyexternals:9500/api/devices/register"
  verb: POST
  entity: NewDevice
end

ExternalREST DeviceToggleExternal
  url: "http://dummyexternals:9500/api/devices/toggle"
  verb: POST
  entity: ToggleCommandValidated
end


// --- EXTERNAL WS FEED (live telemetry) -------------------------
ExternalWS TelemetryFeed
  url: "ws://dummyexternals:9600"
  protocol: "json"
  mode: duplex
  entity_out: TelemetryRaw
end


// --- ENTITIES --------------------------------------------------

// Snapshot of registered devices
Entity Devices
  source: DeviceRegistry
  attributes:
    - devices: list = DeviceRegistry;
end


// --- DEVICE REGISTRATION FLOW ----------------------------------

InternalREST RegisterDevice
  entity: DeviceRegistrationPayload
  verb: POST
  path: "/api/devices/register"
end

Entity DeviceRegistrationPayload
  source: RegisterDevice
  attributes:
    - name: string = RegisterDevice.name;
    - model: string = RegisterDevice.model;
    - firmware: string = RegisterDevice.firmware;
    - token: string = RegisterDevice.token if len(RegisterDevice.token) > 5 else error(400, "Invalid token");
end

Entity NewDevice(DeviceRegistrationPayload)
  attributes:
    - device: dict = {
        "name": DeviceRegistrationPayload.name,
        "model": DeviceRegistrationPayload.model,
        "firmware": DeviceRegistrationPayload.firmware,
        "token": DeviceRegistrationPayload.token,
        "status": "online"
      };
end


// --- DEVICE TOGGLE FLOW ----------------------------------------

InternalREST ToggleCommand
  entity: ToggleCommandPayload
  verb: POST
  path: "/api/devices/toggle"
end

Entity ToggleCommandPayload
  source: ToggleCommand
  attributes:
    - id: string = ToggleCommand.id;
    - action: string = ToggleCommand.action if action in ["on", "off"] else error(400, "Invalid toggle action");
end

Entity ToggleCommandValidated(ToggleCommandPayload, Devices)
  attributes:
    - device: dict = (
        [d for d in Devices.devices if d["id"] == ToggleCommandPayload.id][0]
        if len([d for d in Devices.devices if d["id"] == ToggleCommandPayload.id]) > 0
        else error(404, "Device not found")
      );
    - command: dict = {
        "id": ToggleCommandPayload.id,
        "action": ToggleCommandPayload.action
      };
end


// --- LIVE TELEMETRY FLOW (WS) ---------------------------------

// Raw frame from external WS
Entity TelemetryRaw
  source: TelemetryFeed
  attributes:
    - device_id: string = TelemetryFeed["id"];
    - temperature: float = TelemetryFeed["temp"];
    - humidity: float = TelemetryFeed["hum"];
    - ts: int = TelemetryFeed["ts"];
end

// Compute derived metrics
Entity TelemetryComputed(TelemetryRaw)
  attributes:
    - heat_index: float = (
        TelemetryRaw.temperature + 0.2 * TelemetryRaw.humidity
      );
    - time_ms: int = TelemetryRaw.ts;
end


// --- INTERNAL WS (duplex UI feed) -------------------------------

InternalWS TelemetryStream
  entity_in: TelemetryComputed
  mode: duplex
  path: "/api/telemetry/live"
end


// --- UI COMPONENTS ---------------------------------------------

// Register device form
Component<ActionForm> RegisterDeviceForm
  endpoint: RegisterDevice
  fields: [name, model, firmware, token]
  submitLabel: "Register Device"
end

// Toggle command form
Component<ActionForm> ToggleDeviceForm
  endpoint: ToggleCommand
  fields: [id, action]
  submitLabel: "Toggle Device"
end

// Live telemetry gauge
Component<Gauge> LiveHeatIndex
  endpoint: TelemetryStream
  value: data.heat_index
  min: 0
  max: 150
  label: "Heat Index"
  unit: "Â°C"
end

// Live table of readings
Component<LiveView> TelemetryFeedView
  endpoint: TelemetryStream
  fields: ["device_id", "temperature", "humidity"]
  label: "Live Telemetry Feed"
end
